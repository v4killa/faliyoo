const { Client, GatewayIntentBits, EmbedBuilder, ActivityType } = require('discord.js');
const fs = require('fs').promises;
const path = require('path');

const DISCORD_TOKEN = process.env.DISCORD_TOKEN;
const INVENTARIO_FILE = path.join(__dirname, 'inventario.json');

// Configuraci√≥n de reconexi√≥n autom√°tica
const RECONNECT_CONFIG = {
    maxReconnects: Infinity,
    reconnectDelay: 5000,
    maxReconnectDelay: 60000,
    backoffMultiplier: 1.5
};

let reconnectAttempts = 0;
let isShuttingDown = false;

const client = new Client({
    intents: [
        GatewayIntentBits.Guilds, 
        GatewayIntentBits.GuildMessages, 
        GatewayIntentBits.MessageContent,
        GatewayIntentBits.GuildMessageReactions
    ],
    restTimeOffset: 0,
    restWsBridgeTimeout: 100,
    restRequestTimeout: 15000,
    failIfNotExists: false
});

let inventario = {};
let mensajesActivos = new Map();
let cambiosPendientes = false; // Para evitar guardados excesivos

// Productos con sus emoticonos
const productos = {
    'armas': {
        'üî´': 'glock',
        'üèπ': 'vintage', 
        'üí£': 'beretta',
        'ü™ì': 'hachas',
        'üî™': 'machetes'
    },
    'cargadores': {
        'üì¶': 'cargador pistolas',
        'üóÉÔ∏è': 'cargador subfusil'
    },
    'drogas': {
        'ñ†û': 'bongs',
        'üíä': 'pcp',
        'üç™': 'galletas',
        'üíâ': 'fentanilo',
        '‚ùÑÔ∏è': 'cocaina',
        'üåø': 'marihuana'
    },
    'planos': {
        'üè™': 'supermercado',
        '‚õΩ': 'gasolinera',
        'üíé': 'joyeria',
        'üíá': 'barberia',
        'üç∫': 'licoreria',
        '‚ûï': 'farmacia',
        'üõ†Ô∏è': 'arquitectinicos'
    }
};

// Emoticonos de navegaci√≥n y operaciones
const emojisControl = {
    categorias: {
        'üî´': 'armas',
        'üì¶': 'cargadores', 
        'üíä': 'drogas',
        'üó∫Ô∏è': 'planos'
    },
    operaciones: {
        '‚ûï': 'add',
        '‚ûñ': 'remove'
    },
    numeros: {
        '1Ô∏è‚É£': 1, '2Ô∏è‚É£': 2, '3Ô∏è‚É£': 3, '4Ô∏è‚É£': 4, '5Ô∏è‚É£': 5,
        '6Ô∏è‚É£': 6, '7Ô∏è‚É£': 7, '8Ô∏è‚É£': 8, '9Ô∏è‚É£': 9
    },
    especiales: {
        'üî•': 25,
        'üí•': 50
    },
    navegacion: {
        '‚¨ÖÔ∏è': 'back',
        'üè†': 'home',
        'üìä': 'stock',
        'üîÑ': 'refresh'
    }
};

const estadosSesion = {
    HOME: 'home',
    CATEGORIA: 'categoria',
    PRODUCTO: 'producto',
    OPERACION: 'operacion',
    CANTIDAD: 'cantidad'
};

// Sistema de reconexi√≥n autom√°tica
async function reconnect() {
    if (isShuttingDown) return;
    
    const delay = Math.min(
        RECONNECT_CONFIG.reconnectDelay * Math.pow(RECONNECT_CONFIG.backoffMultiplier, reconnectAttempts),
        RECONNECT_CONFIG.maxReconnectDelay
    );
    
    console.log(`üîÑ Reintentando conexi√≥n en ${delay/1000}s... (Intento ${reconnectAttempts + 1})`);
    
    setTimeout(async () => {
        if (isShuttingDown) return;
        
        try {
            if (client.readyTimestamp) {
                await client.destroy();
            }
            await client.login(DISCORD_TOKEN);
            reconnectAttempts = 0;
        } catch (error) {
            console.error('‚ùå Error en reconexi√≥n:', error.message);
            reconnectAttempts++;
            if (reconnectAttempts < RECONNECT_CONFIG.maxReconnects) {
                reconnect();
            }
        }
    }, delay);
}

// Eventos de conexi√≥n
client.on('ready', async () => {
    console.log(`‚úÖ Bot conectado: ${client.user.tag}`);
    client.user.setActivity('Inventario GTA RP üî´', { type: ActivityType.Watching });
    reconnectAttempts = 0;
    await cargarInventario();
    await inicializarProductos();
});

client.on('disconnect', () => {
    console.log('‚ö†Ô∏è Bot desconectado - Guardando inventario...');
    guardarInventarioSincronizado();
    if (!isShuttingDown) reconnect();
});

client.on('error', (error) => {
    console.error('‚ùå Error:', error.message);
    if (!isShuttingDown) reconnect();
});

client.on('shardError', (error) => {
    console.error('‚ùå Shard error:', error.message);
    if (!isShuttingDown) reconnect();
});

// Funciones del inventario mejoradas
async function cargarInventario() {
    try {
        const data = await fs.readFile(INVENTARIO_FILE, 'utf8');
        inventario = JSON.parse(data);
        console.log('‚úÖ Inventario cargado:', Object.keys(inventario).length, 'items');
    } catch {
        console.log('‚ö†Ô∏è Creando nuevo inventario...');
        inventario = {};
        await guardarInventario();
    }
}

async function guardarInventario() {
    try {
        await fs.writeFile(INVENTARIO_FILE, JSON.stringify(inventario, null, 2));
        cambiosPendientes = false;
        console.log('üíæ Inventario guardado');
    } catch (error) {
        console.error('‚ùå Error guardando:', error.message);
    }
}

// Guardado s√≠ncrono para desconexiones
function guardarInventarioSincronizado() {
    try {
        require('fs').writeFileSync(INVENTARIO_FILE, JSON.stringify(inventario, null, 2));
        console.log('üíæ Inventario guardado (s√≠ncrono)');
    } catch (error) {
        console.error('‚ùå Error guardando s√≠ncrono:', error.message);
    }
}

async function inicializarProductos() {
    let inicializado = false;
    const todosProductos = Object.values(productos).flatMap(categoria => Object.values(categoria));
    
    todosProductos.forEach(item => {
        if (!(item in inventario)) {
            inventario[item] = 0;
            inicializado = true;
        }
    });
    
    if (inicializado) {
        await guardarInventario();
        console.log('üîß Productos inicializados');
    }
}

function crearEmbed(title, color = '#8b0000') {
    return new EmbedBuilder().setColor(color).setTitle(title).setTimestamp();
}

function obtenerEmojiProducto(nombreProducto) {
    for (const categoria of Object.values(productos)) {
        for (const [emoji, nombre] of Object.entries(categoria)) {
            if (nombre === nombreProducto) return emoji;
        }
    }
    return 'üì¶';
}

async function agregarReacciones(message, emojis) {
    try {
        for (const emoji of emojis) {
            await message.react(emoji);
            await new Promise(resolve => setTimeout(resolve, 250));
        }
    } catch (error) {
        console.error('‚ùå Error agregando reacciones:', error.message);
    }
}

// Funci√≥n para buscar productos por nombre parcial
function buscarProducto(termino) {
    const todosProductos = Object.values(productos).flatMap(categoria => Object.values(categoria));
    return todosProductos.filter(producto => 
        producto.toLowerCase().includes(termino.toLowerCase())
    );
}

// Pantallas del sistema (sin cambios significativos)
async function mostrarHome(message) {
    const embed = crearEmbed('üéÆ Inventario GTA RP - Interfaz Interactiva', '#4169e1')
        .setDescription(`**Selecciona una categor√≠a clickeando el emoji:**\n\nüî´ **Armas** - Pistolas, rifles y armamento\nüì¶ **Cargadores** - Munici√≥n y accesorios\nüíä **Drogas** - Sustancias ilegales\nüó∫Ô∏è **Planos** - Mapas de locaciones\n\n**Controles:**\nüìä Ver resumen completo\nüîÑ Actualizar inventario\n\n*Clickea cualquier emoji para navegar* ‚ö°`);

    const newMessage = await message.reply({ embeds: [embed] });
    
    mensajesActivos.set(newMessage.id, {
        estado: estadosSesion.HOME,
        usuario: message.author.id
    });

    const emojisHome = ['üî´', 'üì¶', 'üíä', 'üó∫Ô∏è', 'üìä', 'üîÑ'];
    await agregarReacciones(newMessage, emojisHome);
    
    return newMessage;
}

async function mostrarCategoria(message, categoria) {
    const productosCategoria = productos[categoria];
    const emojiCategoria = Object.keys(emojisControl.categorias).find(k => emojisControl.categorias[k] === categoria);
    
    let descripcion = `**Productos disponibles:**\n\n`;
    const emojisReacciones = [];
    
    for (const [emoji, producto] of Object.entries(productosCategoria)) {
        const stock = inventario[producto] || 0;
        const estado = stock === 0 ? 'üî¥' : stock < 10 ? 'üü°' : 'üü¢';
        descripcion += `${emoji} **${producto}** ${estado} (${stock})\n`;
        emojisReacciones.push(emoji);
    }
    
    descripcion += `\n**Controles:**\n‚¨ÖÔ∏è Volver al men√∫ principal`;
    
    const embed = crearEmbed(`${emojiCategoria} ${categoria.toUpperCase()}`, '#ff6347')
        .setDescription(descripcion);

    const editedMessage = await message.edit({ embeds: [embed] });
    
    await editedMessage.reactions.removeAll();
    mensajesActivos.set(editedMessage.id, {
        estado: estadosSesion.CATEGORIA,
        usuario: mensajesActivos.get(editedMessage.id).usuario,
        categoria: categoria
    });

    emojisReacciones.push('‚¨ÖÔ∏è');
    await agregarReacciones(editedMessage, emojisReacciones);
}

async function mostrarProducto(message, producto) {
    const emoji = obtenerEmojiProducto(producto);
    const stock = inventario[producto] || 0;
    const estado = stock === 0 ? 'üî¥ Agotado' : stock < 10 ? 'üü° Stock Bajo' : 'üü¢ Stock Normal';
    
    const embed = crearEmbed(`${emoji} ${producto.toUpperCase()}`, '#6f42c1')
        .setDescription(`**Stock actual:** ${stock}\n**Estado:** ${estado}\n\n**¬øQu√© deseas hacer?**\n‚ûï Agregar unidades\n‚ûñ Quitar unidades\n\n**Controles:**\n‚¨ÖÔ∏è Volver a la categor√≠a\nüè† Ir al men√∫ principal`);

    const editedMessage = await message.edit({ embeds: [embed] });
    
    await editedMessage.reactions.removeAll();
    mensajesActivos.set(editedMessage.id, {
        estado: estadosSesion.PRODUCTO,
        usuario: mensajesActivos.get(editedMessage.id).usuario,
        producto: producto
    });

    const emojisOperaciones = ['‚ûï', '‚ûñ', '‚¨ÖÔ∏è', 'üè†'];
    await agregarReacciones(editedMessage, emojisOperaciones);
}

async function mostrarCantidades(message, producto, operacion) {
    const emoji = obtenerEmojiProducto(producto);
    const accion = operacion === 'add' ? 'AGREGAR' : 'QUITAR';
    const color = operacion === 'add' ? '#28a745' : '#dc3545';
    
    const embed = crearEmbed(`${operacion === 'add' ? '‚ûï' : '‚ûñ'} ${emoji} ${producto.toUpperCase()}`, color)
        .setDescription(`**Selecciona la cantidad a ${accion.toLowerCase()}:**\n\n**Cantidades individuales:**\n1Ô∏è‚É£ 2Ô∏è‚É£ 3Ô∏è‚É£ 4Ô∏è‚É£ 5Ô∏è‚É£\n6Ô∏è‚É£ 7Ô∏è‚É£ 8Ô∏è‚É£ 9Ô∏è‚É£\n\n**Cantidades especiales:**\nüî• 25 unidades\nüí• 50 unidades\n\n**Controles:**\n‚¨ÖÔ∏è Volver al producto\nüè† Ir al men√∫ principal`);

    const editedMessage = await message.edit({ embeds: [embed] });
    
    await editedMessage.reactions.removeAll();
    mensajesActivos.set(editedMessage.id, {
        estado: estadosSesion.CANTIDAD,
        usuario: mensajesActivos.get(editedMessage.id).usuario,
        producto: producto,
        operacion: operacion
    });

    const emojisCantidades = [
        '1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£',
        '6Ô∏è‚É£', '7Ô∏è‚É£', '8Ô∏è‚É£', '9Ô∏è‚É£',
        'üî•', 'üí•', '‚¨ÖÔ∏è', 'üè†'
    ];
    await agregarReacciones(editedMessage, emojisCantidades);
}

async function procesarOperacion(message, producto, operacion, cantidad) {
    const emoji = obtenerEmojiProducto(producto);
    let resultado = '';
    let color = '#28a745';
    
    if (operacion === 'add') {
        inventario[producto] = (inventario[producto] || 0) + cantidad;
        resultado = `‚úÖ **AGREGADO**\n\n${emoji} **${producto}**\n‚ûï **+${cantidad}** unidades\n\nüìä **Stock actual:** ${inventario[producto]}`;
        cambiosPendientes = true;
        await guardarInventario(); // Guardar inmediatamente
    } else {
        const stockActual = inventario[producto] || 0;
        if (stockActual < cantidad) {
            resultado = `‚ùå **ERROR**\n\n${emoji} **${producto}**\n‚ö†Ô∏è **Stock insuficiente**\n\nüìä **Stock disponible:** ${stockActual}\nüö´ **Solicitado:** ${cantidad}`;
            color = '#dc3545';
        } else {
            inventario[producto] -= cantidad;
            resultado = `üì§ **RETIRADO**\n\n${emoji} **${producto}**\n‚ûñ **-${cantidad}** unidades\n\nüìä **Stock restante:** ${inventario[producto]}`;
            color = '#dc3545';
            cambiosPendientes = true;
            await guardarInventario(); // Guardar inmediatamente
        }
    }
    
    const embed = crearEmbed(`${operacion === 'add' ? '‚ûï' : '‚ûñ'} OPERACI√ìN COMPLETADA`, color)
        .setDescription(`${resultado}\n\n**Controles:**\n‚¨ÖÔ∏è Volver al producto\nüè† Ir al men√∫ principal\nüîÑ Realizar otra operaci√≥n`);

    const editedMessage = await message.edit({ embeds: [embed] });
    
    await editedMessage.reactions.removeAll();
    mensajesActivos.set(editedMessage.id, {
        estado: estadosSesion.PRODUCTO,
        usuario: mensajesActivos.get(editedMessage.id).usuario,
        producto: producto
    });

    const emojisResultado = ['‚¨ÖÔ∏è', 'üè†', 'üîÑ'];
    await agregarReacciones(editedMessage, emojisResultado);
}

async function mostrarStockCompleto(message) {
    let descripcion = '';
    let totalItems = 0, totalUnidades = 0;
    
    for (const [catNombre, catProductos] of Object.entries(productos)) {
        const emojiCat = Object.keys(emojisControl.categorias).find(k => emojisControl.categorias[k] === catNombre);
        descripcion += `\n**${emojiCat} ${catNombre.toUpperCase()}**\n`;
        
        for (const [emojiProd, producto] of Object.entries(catProductos)) {
            if (inventario.hasOwnProperty(producto)) {
                const stock = inventario[producto];
                const estado = stock === 0 ? 'üî¥' : stock < 10 ? 'üü°' : 'üü¢';
                descripcion += `${estado} ${emojiProd} ${producto}: **${stock}**\n`;
                totalItems++;
                totalUnidades += stock;
            }
        }
    }
    
    const embed = crearEmbed('üìä RESUMEN COMPLETO DEL INVENTARIO', '#17a2b8')
        .setDescription(`${descripcion}\n**üìà TOTALES:**\nüî¢ **Items √∫nicos:** ${totalItems}\nüì¶ **Unidades totales:** ${totalUnidades}\n\n**Controles:**\nüè† Volver al men√∫ principal`)
        .setFooter({ text: 'üü¢ Normal | üü° Bajo | üî¥ Agotado' });

    const editedMessage = await message.edit({ embeds: [embed] });
    
    await editedMessage.reactions.removeAll();
    mensajesActivos.set(editedMessage.id, {
        estado: estadosSesion.HOME,
        usuario: mensajesActivos.get(editedMessage.id).usuario
    });

    await agregarReacciones(editedMessage, ['üè†']);
}

// Comandos de texto mejorados
const comandos = {
    async inventario(message) {
        await mostrarHome(message);
    },

    async stock(message, args) {
        if (args.length === 0) {
            // Mostrar stock resumido
            let descripcion = '**üìä STOCK R√ÅPIDO:**\n\n';
            for (const [catNombre, catProductos] of Object.entries(productos)) {
                for (const [emojiProd, producto] of Object.entries(catProductos)) {
                    const stock = inventario[producto] || 0;
                    const estado = stock === 0 ? 'üî¥' : stock < 10 ? 'üü°' : 'üü¢';
                    descripcion += `${estado}${emojiProd} ${producto}: **${stock}**\n`;
                }
            }
            
            const embed = crearEmbed('üìã Stock Completo', '#17a2b8')
                .setDescription(descripcion)
                .setFooter({ text: 'Usa: !stock [producto] para buscar espec√≠fico' });
            
            await message.reply({ embeds: [embed] });
        } else {
            // Buscar producto espec√≠fico
            const termino = args.join(' ');
            const productosEncontrados = buscarProducto(termino);
            
            if (productosEncontrados.length === 0) {
                const embed = crearEmbed('‚ùå Producto no encontrado', '#dc3545')
                    .setDescription(`No se encontr√≥: **${termino}**\nUsa \`!stock\` para ver todos`);
                await message.reply({ embeds: [embed] });
                return;
            }
            
            let descripcion = `**üîç Resultados para: "${termino}"**\n\n`;
            for (const producto of productosEncontrados) {
                const stock = inventario[producto] || 0;
                const emoji = obtenerEmojiProducto(producto);
                const estado = stock === 0 ? 'üî¥ Agotado' : stock < 10 ? 'üü° Bajo' : 'üü¢ Normal';
                descripcion += `${emoji} **${producto}**\nüìä Stock: **${stock}** ${estado}\n\n`;
            }
            
            const embed = crearEmbed('üìã Stock Encontrado', '#28a745')
                .setDescription(descripcion);
            
            await message.reply({ embeds: [embed] });
        }
    },

    async ayuda(message) {
        const embed = crearEmbed('üî´ Bot Inventario GTA RP - Gu√≠a de Uso')
            .setDescription(`**üéÆ COMANDOS B√ÅSICOS:**\n‚Ä¢ \`!inventario\` - Interfaz interactiva\n‚Ä¢ \`!stock\` - Ver todo el stock\n‚Ä¢ \`!stock [producto]\` - Buscar producto\n‚Ä¢ \`!ayuda\` - Ver esta gu√≠a\n\n**üñ±Ô∏è NAVEGACI√ìN:**\n1. Usa \`!inventario\` para la interfaz completa\n2. Clickea emojis para navegar\n3. ‚ûï‚ûñ para modificar cantidades\n4. üî•=25, üí•=50 unidades\n\n**üö¶ ESTADOS:**\nüü¢ Normal (10+) | üü° Bajo (<10) | üî¥ Agotado (0)\n\n**üí° EJEMPLOS:**\n\`!stock glock\` - Ver stock de glock\n\`!stock coca\` - Buscar cocaina\n\`!stock\` - Ver todo el inventario`);
        await message.reply({ embeds: [embed] });
    }
};

// Manejo de reacciones (sin cambios)
client.on('messageReactionAdd', async (reaction, user) => {
    if (user.bot) return;
    
    const message = reaction.message;
    const emoji = reaction.emoji.name;
    
    const sesion = mensajesActivos.get(message.id);
    if (!sesion || sesion.usuario !== user.id) return;
    
    try {
        await reaction.users.remove(user.id);
    } catch (error) {
        console.error('‚ùå Error removiendo reacci√≥n:', error.message);
    }
    
    try {
        switch (sesion.estado) {
            case estadosSesion.HOME:
                if (emojisControl.categorias[emoji]) {
                    await mostrarCategoria(message, emojisControl.categorias[emoji]);
                } else if (emoji === 'üìä') {
                    await mostrarStockCompleto(message);
                } else if (emoji === 'üîÑ') {
                    await mostrarHome(message);
                }
                break;
                
            case estadosSesion.CATEGORIA:
                if (emoji === '‚¨ÖÔ∏è') {
                    await mostrarHome(message);
                } else if (productos[sesion.categoria] && productos[sesion.categoria][emoji]) {
                    await mostrarProducto(message, productos[sesion.categoria][emoji]);
                }
                break;
                
            case estadosSesion.PRODUCTO:
                if (emoji === '‚ûï' || emoji === '‚ûñ') {
                    const operacion = emoji === '‚ûï' ? 'add' : 'remove';
                    await mostrarCantidades(message, sesion.producto, operacion);
                } else if (emoji === '‚¨ÖÔ∏è') {
                    let categoria = null;
                    for (const [cat, prods] of Object.entries(productos)) {
                        if (Object.values(prods).includes(sesion.producto)) {
                            categoria = cat;
                            break;
                        }
                    }
                    if (categoria) {
                        await mostrarCategoria(message, categoria);
                    }
                } else if (emoji === 'üè†') {
                    await mostrarHome(message);
                } else if (emoji === 'üîÑ') {
                    await mostrarProducto(message, sesion.producto);
                }
                break;
                
            case estadosSesion.CANTIDAD:
                let cantidad = null;
                if (emojisControl.numeros[emoji]) {
                    cantidad = emojisControl.numeros[emoji];
                } else if (emojisControl.especiales[emoji]) {
                    cantidad = emojisControl.especiales[emoji];
                } else if (emoji === '‚¨ÖÔ∏è') {
                    await mostrarProducto(message, sesion.producto);
                    return;
                } else if (emoji === 'üè†') {
                    await mostrarHome(message);
                    return;
                }
                
                if (cantidad !== null) {
                    await procesarOperacion(message, sesion.producto, sesion.operacion, cantidad);
                }
                break;
        }
    } catch (error) {
        console.error('‚ùå Error procesando reacci√≥n:', error.message);
    }
});

// Manejo de mensajes
client.on('messageCreate', async (message) => {
    if (message.author.bot || !message.content.startsWith('!')) return;
    
    const args = message.content.slice(1).trim().split(/ +/);
    const cmd = args.shift().toLowerCase();
    
    const aliases = {
        'help': 'ayuda',
        'inv': 'inventario',
        'start': 'inventario',
        's': 'stock'
    };
    
    const comando = aliases[cmd] || cmd;
    
    if (comandos[comando]) {
        try {
            await comandos[comando](message, args);
        } catch (error) {
            console.error('‚ùå Error comando:', error.message);
            await message.reply('‚ùå Error procesando comando');
        }
    }
});

// Guardado peri√≥dico autom√°tico
setInterval(async () => {
    if (cambiosPendientes) {
        await guardarInventario();
    }
}, 30000); // Cada 30 segundos si hay cambios

// Limpiar mensajes inactivos
setInterval(() => {
    const now = Date.now();
    for (const [messageId, sesion] of mensajesActivos.entries()) {
        if (now - sesion.timestamp > 30 * 60 * 1000) {
            mensajesActivos.delete(messageId);
        }
    }
}, 5 * 60 * 1000);

// Manejo de cierre elegante con guardado forzado
process.on('SIGTERM', async () => {
    console.log('üõë Cerrando bot - Guardando inventario...');
    isShuttingDown = true;
    guardarInventarioSincronizado();
    client.destroy();
    process.exit(0);
});

process.on('SIGINT', async () => {
    console.log('üõë Cerrando bot - Guardando inventario...');
    isShuttingDown = true;
    guardarInventarioSincronizado();
    client.destroy();
    process.exit(0);
});

process.on('beforeExit', () => {
    console.log('üíæ Guardado final del inventario...');
    guardarInventarioSincronizado();
});

// Validaci√≥n y conexi√≥n
if (!DISCORD_TOKEN) {
    console.error('‚ùå ERROR: Token de Discord no configurado');
    process.exit(1);
}

console.log('üöÄ Iniciando bot con guardado mejorado...');
client.login(DISCORD_TOKEN).catch(error => {
    console.error('‚ùå Error inicial:', error.message);
    reconnectAttempts++;
    reconnect();
});
